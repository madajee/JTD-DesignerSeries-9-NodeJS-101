Application [node-todo]: Let's build a To-Do list app with a MEAN stack.

Requirements:

a) A user can add, edit & delete todos.
b) Each todo can be marked as complete.
c) Each todo can have an optional file attachment.
d) One person cannot access the todos of another.


Implementation Plan

I. Initial Setup

a) Identify the initial node modules [Mongoose, Express]
b) Use Express to create App Server. Setup the template engine & static directory mapping. [app.js]
c) Use Mongoose [mongoose.connect()] to open a connection with the MongoDB. [app.js]
d) Use Mongoose [mongoose.model()] to map the model schema to a mongoose model object. [models/todoModel.js]
e) Setup some seed data by creating a controller function and create function on mongoose model object. [controllers/setupController.js]
f) Test the seed data with the api path [http://localhost:3000/api/setupTodos] and then querying the todos collection in nodetodosample DB.

II. Extend the TODO App to build the CRUD API.

a) Use the body-parser middleware to parse the request params.
b) App get & post function will use the mongoose model functions to retrieve & insert data from todos collection.
GET /api/todos/:uname ----> Todos.find({ username: req.params.uname})
GET /api/todo/:id -------> Todos.findById({ _id: req.params.id })
POST /api/todo ---------> Todos.findByIdAndUpdate, newTodo.save()
DELETE /api/todo -------> Todos.findByIdAndRemove

III. Test the CRUD API.
a) Setup Todos by running the seed url [http://localhost:3000/api/setupTodos]
b) Query the todos with GET & uname:  [http://localhost:3000/api/todos/test], [Output: 3 Todos].
c) Query a single todod with GET & id: [http://localhost:3000/api/todo/5bdee67b530c17387a9a1ea1], [Output: 1 Todo]
d) Update a Todo with POST [http://localhost:3000/api/todo/] {"id": "5bdee67b530c17387a9a1ea1","todo": "Buy Milk","isDone": true}
d) Create a Todo with POST [http://localhost:3000/api/todo/] {"todo": "Buy Steak","isDone": true,"hasAttachment": null,"__v": 0}

IV. Create an Angular Frontend
a) module: my-app, component: AppComponent, Service: TodoService, Model: Todo
b) todo.service.ts - gets the todos in the todo array using the /api/todos/test.
c) AppComponent template renders the todo by using ngFor angular directive.